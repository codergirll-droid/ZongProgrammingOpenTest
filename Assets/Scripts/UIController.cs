using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using TMPro;

public class UIController : MonoBehaviour
{

    public static UIController Instance;

    public TMP_Text interactionText;
    public TMP_Text feedbackText;

    public GameObject MainMenu;
    public GameObject instrumentsMenu;

    public Button instrumentButtonPrefab;
    public Transform instrumentContent;

    InventoryManager _inventoryManager;

    void Awake()
    {
        if(Instance == null)
        {
            Instance = this;
        }
        else
        {
            Destroy(this.gameObject);
        }
    }

    private void Start()
    {
        _inventoryManager = InventoryManager.Instance;
    }

    public void EditInteractableText(string interactableName)
    {
        if(interactableName != "")
        {
            interactionText.text = "Press I to interact with " + interactableName;

        }
        else
        {
            interactionText.text = "";

        }
    }


    IEnumerator PickUpTextFeedback(string feedbackTextStr, float secondsToWait)
    {
        feedbackText.text = "Picked up " + feedbackTextStr;
        yield return new WaitForSeconds(secondsToWait);
        feedbackText.text = "";

    }

    public void PickUpFeedback(string feedbackTextStr, float secondsToWait)
    {
        IEnumerator c = PickUpTextFeedback(feedbackTextStr, secondsToWait);
        StartCoroutine(c);
    }

    IEnumerator UpdateFeedback(string feedbackTextStr, float secondsToWait)
    {
        feedbackText.text = feedbackTextStr;
        yield return new WaitForSeconds(secondsToWait);
        feedbackText.text = "";

    }

    public void UpdateFeedbackText(string feedbackTextStr, float secondsToWait)
    {
        IEnumerator c = UpdateFeedback(feedbackTextStr, secondsToWait);
        StartCoroutine(c);
    }

    public void OpenMainMenu()
    {
        MainMenu.SetActive(true);
    }

    void HDisplayInstruments(List<ScriptableObjects> instruments)
    {
        foreach (ScriptableObjects instrument in instruments)
        {
            Button newInstrumentButton = Instantiate(instrumentButtonPrefab, instrumentContent);
            newInstrumentButton.GetComponentInChildren<TMP_Text>().text = instrument.objectName;
            newInstrumentButton.transform.GetChild(1).GetComponent<Image>().sprite = instrument.objectImage;
        }

    }

    void ClearInstrumentObjects()
    {
        foreach (Transform instrument in instrumentContent)
        {
            Destroy(instrument.gameObject);
        }
    }

    public void DisplayInstruments()
    {
        ClearInstrumentObjects();
        HDisplayInstruments(_inventoryManager.instrumentsList);
    }
}
